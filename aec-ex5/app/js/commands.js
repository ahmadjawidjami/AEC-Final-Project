const program = require('commander'),
    pkg = require('../package.json');
const Web3 = require("web3");

let web3 = new Web3();
web3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'));

// The Application Binary Interface
// TODO: check if this is proper way to parse abi
let abi = '[{"constant":true,"inputs":[],"name":"fundingStatus","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_title","type":"string"},{"name":"_description","type":"string"},{"name":"_fundingGoal","type":"uint256"}],"name":"Projects","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"title","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"description","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"fundingGoal","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"showStatus","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fundProject","outputs":[{"name":"success","type":"bool"}],"payable":true,"type":"function"},{"payable":true,"type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"backer","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"SomeoneBacked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"fundingStatus","type":"uint256"},{"indexed":false,"name":"goalReached","type":"bool"}],"name":"AskedForStatus","type":"event"}]';

// Get a proxy on our contract
let SampleContract = web3.eth.contract(abi);

// TODO: change contract contractAddress to published one and test
let contractAddress = '0x6060604052341561000c57fe5b5b61098c8061001c6000396000f3006060604052361561008c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633fb23865146102b057806341c0e1b5146102d657806347e48f2c146102e85780634a79d50c1461038e5780637284e416146104275780637a3a0e84146104c057806392c5ff3e146104e6578063d63dc661146104f8575b6102ae5b60006000349150339050600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16156101445781600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254019250508190555061022e565b60406040519081016040528083815260200160011515815250600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff021916908315150217905550905050600580548060010182816101dd919061088f565b916000526020600020900160005b83909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b816004600082825401925050819055507fd13a262c7f889aa08a3a747c0af3d17ae43bee093f2770f71bd6e03527823f6a8183604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5050565b005b34156102b857fe5b6102c061051a565b6040518082815260200191505060405180910390f35b34156102de57fe5b6102e6610520565b005b34156102f057fe5b61038c600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050610672565b005b341561039657fe5b61039e6106ee565b60405180806020018281038252838181518152602001915080519060200190808383600083146103ed575b8051825260208311156103ed576020820191506020810190506020830392506103c9565b505050905090810190601f1680156104195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561042f57fe5b61043761078c565b6040518080602001828103825283818151815260200191508051906020019080838360008314610486575b80518252602083111561048657602082019150602081019050602083039250610462565b505050905090810190601f1680156104b25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104c857fe5b6104d061082a565b6040518082815260200191505060405180910390f35b34156104ee57fe5b6104f6610830565b005b610500610885565b604051808215151515815260200191505060405180910390f35b60045481565b60006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561066d57600091505b6005805490508210156106535760058281548110151561059b57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549081150290604051809050600060405180830381858888f19350505050505b818060010192505061057f565b3373ffffffffffffffffffffffffffffffffffffffff16ff5b5b5b5050565b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600190805190602001906106c99291906108bb565b5081600290805190602001906106e09291906108bb565b50806003819055505b505050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107845780601f1061075957610100808354040283529160200191610784565b820191906000526020600020905b81548152906001019060200180831161076757829003601f168201915b505050505081565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108225780601f106107f757610100808354040283529160200191610822565b820191906000526020600020905b81548152906001019060200180831161080557829003601f168201915b505050505081565b60035481565b6000600354600454101590507f7c116be7594e6f7332a42b05ad49acad18fcc85ad2909d04dab1f9ff7dcf36826004548260405180838152602001821515151581526020019250505060405180910390a15b50565b6000600090505b90565b8154818355818115116108b6578183600052602060002091820191016108b5919061093b565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106108fc57805160ff191683800117855561092a565b8280016001018555821561092a579182015b8281111561092957825182559160200191906001019061090e565b5b509050610937919061093b565b5090565b61095d91905b80821115610959576000816000905550600101610941565b5090565b905600a165627a7a723058201e5876efe476b6eb54522f9c459a47296ffd3efe1689a32fad39ca56f19e33ee0029';

let contract = SampleContract.at(contractAddress);

// Perform a transaction using ETH from the geth coinbase account
web3.personal.unlockAccount(web3.eth.coinbase, "");

// Set the account from where we perform out contract transactions
web3.eth.defaultAccount = web3.eth.coinbase;

let projects;

/**
 * Create project with given command line arguments
 *
 */
let create = (cmd, owner, description, funding) => {

    projects[i++] = contract.new(owner, description, funding,
        {
            to: contractAddress,
            from: web3.eth.accounts[0],
            data: '0x6060604052341561000c57fe5b5b61098c8061001c6000396000f3006060604052361561008c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633fb23865146102b057806341c0e1b5146102d657806347e48f2c146102e85780634a79d50c1461038e5780637284e416146104275780637a3a0e84146104c057806392c5ff3e146104e6578063d63dc661146104f8575b6102ae5b60006000349150339050600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16156101445781600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254019250508190555061022e565b60406040519081016040528083815260200160011515815250600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff021916908315150217905550905050600580548060010182816101dd919061088f565b916000526020600020900160005b83909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b816004600082825401925050819055507fd13a262c7f889aa08a3a747c0af3d17ae43bee093f2770f71bd6e03527823f6a8183604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5050565b005b34156102b857fe5b6102c061051a565b6040518082815260200191505060405180910390f35b34156102de57fe5b6102e6610520565b005b34156102f057fe5b61038c600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050610672565b005b341561039657fe5b61039e6106ee565b60405180806020018281038252838181518152602001915080519060200190808383600083146103ed575b8051825260208311156103ed576020820191506020810190506020830392506103c9565b505050905090810190601f1680156104195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561042f57fe5b61043761078c565b6040518080602001828103825283818151815260200191508051906020019080838360008314610486575b80518252602083111561048657602082019150602081019050602083039250610462565b505050905090810190601f1680156104b25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104c857fe5b6104d061082a565b6040518082815260200191505060405180910390f35b34156104ee57fe5b6104f6610830565b005b610500610885565b604051808215151515815260200191505060405180910390f35b60045481565b60006000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561066d57600091505b6005805490508210156106535760058281548110151561059b57fe5b906000526020600020900160005b9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549081150290604051809050600060405180830381858888f19350505050505b818060010192505061057f565b3373ffffffffffffffffffffffffffffffffffffffff16ff5b5b5b5050565b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600190805190602001906106c99291906108bb565b5081600290805190602001906106e09291906108bb565b50806003819055505b505050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107845780601f1061075957610100808354040283529160200191610784565b820191906000526020600020905b81548152906001019060200180831161076757829003601f168201915b505050505081565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108225780601f106107f757610100808354040283529160200191610822565b820191906000526020600020905b81548152906001019060200180831161080557829003601f168201915b505050505081565b60035481565b6000600354600454101590507f7c116be7594e6f7332a42b05ad49acad18fcc85ad2909d04dab1f9ff7dcf36826004548260405180838152602001821515151581526020019250505060405180910390a15b50565b6000600090505b90565b8154818355818115116108b6578183600052602060002091820191016108b5919061093b565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106108fc57805160ff191683800117855561092a565b8280016001018555821561092a579182015b8281111561092957825182559160200191906001019061090e565b5b509050610937919061093b565b5090565b61095d91905b80821115610959576000816000905550600101610941565b5090565b905600a165627a7a723058201e5876efe476b6eb54522f9c459a47296ffd3efe1689a32fad39ca56f19e33ee0029',
        }, function (e, contract) {
            if (!e) {
                if (!contract.address) {
                    console.log("Contract transaction send: TransactionHash: "
                        + contract.transactionHash + " waiting to be mined...");
                } else {
                    console.log("Contract mined, project created! Address: " + contract.address);
                    console.log(contract);
                }
            }
        });
};

/**
 * Show funding status of project with given title
 *
 */
let status = (cmd, title) => {
    let isMatch = false;
    for (let i = 0; i < projects.length; i++) {
        let project = projects[i];
        if (project.title === title) { // TODO: check if this is how to retrieve title
            isMatch = true;
            let status = contract.showStatus.call();
            console.log("Funding status = " + status);
        }
    }
    if(!isMatch) {
        console.log("No funding status found for " + title);
    }
};

program
    .version(pkg.version)
    .command('create <owner, description, funding>') // TODO: check if correct syntax
    .action(create);

program
    .version(pkg.version)
    .command('status <title>')
    .action(status);

program.parse(process.argv);

// if program was called with no arguments, show help.
if (program.args.length === 0) program.help();